# Pull Request Checks Workflow
# 
# Additional checks specific to pull requests including:
# - Semantic PR title validation
# - Breaking change detection
# - Documentation updates verification
# - Dependencies impact analysis

name: PR Checks

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # ============================================================================
  # PR Metadata Validation
  # ============================================================================
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check PR size
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const additions = pr.additions;
            const deletions = pr.deletions;
            const changedFiles = pr.changed_files;
            
            console.log(`PR Statistics:`);
            console.log(`  Lines added: ${additions}`);
            console.log(`  Lines deleted: ${deletions}`);
            console.log(`  Files changed: ${changedFiles}`);
            
            // Check for large PRs (>500 lines or >20 files)
            if (additions + deletions > 500 || changedFiles > 20) {
              core.warning(`This PR is quite large (${additions + deletions} lines, ${changedFiles} files). Consider breaking it into smaller PRs for easier review.`);
            }

  # ============================================================================
  # Breaking Changes Detection
  # ============================================================================
  breaking-changes:
    name: Breaking Changes Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --ignore-scripts

      - name: Detect API changes
        run: |
          echo "🔍 Analyzing API changes..."
          
          # Build current version
          npm run build
          
          # Extract public API
          node scripts/extract-api.js > current-api.json || echo "[]" > current-api.json
          
          # Checkout base branch and build
          git checkout origin/main
          npm ci --prefer-offline --no-audit --ignore-scripts  
          npm run build
          node scripts/extract-api.js > baseline-api.json || echo "[]" > baseline-api.json
          
          # Compare APIs
          node scripts/compare-api.js baseline-api.json current-api.json

      - name: Check for breaking changes in schemas
        run: |
          echo "🔍 Checking for breaking schema changes..."
          
          # Check for changes in core type definitions
          if git diff --name-only origin/main...HEAD | grep -E 'types\.ts$|interfaces\.ts$|schema.*\.ts$'; then
            echo "⚠️  Schema files modified - manual review required for breaking changes"
            
            # Extract changed files
            git diff --name-only origin/main...HEAD | grep -E 'types\.ts$|interfaces\.ts$|schema.*\.ts$' | while read file; do
              echo "Modified schema file: $file"
              git diff origin/main...HEAD "$file" | grep -E '^\-.*\:|^\-.*interface|^\-.*type' || true
            done
          else
            echo "✅ No schema files modified"
          fi

  # ============================================================================
  # Documentation Requirements Check
  # ============================================================================
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if documentation needs update
        run: |
          echo "📚 Checking documentation requirements..."
          
          # Check if code changes require documentation updates
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          CODE_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(ts|js)$' | grep -v test | wc -l)
          DOC_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(md|txt)$|docs/' | wc -l)
          
          echo "Code files changed: $CODE_CHANGES"
          echo "Documentation files changed: $DOC_CHANGES"
          
          if [ "$CODE_CHANGES" -gt 5 ] && [ "$DOC_CHANGES" -eq 0 ]; then
            echo "⚠️  Significant code changes detected without documentation updates"
            echo "Please consider updating relevant documentation"
            exit 1
          else
            echo "✅ Documentation requirements satisfied"
          fi

      - name: Validate documentation links
        run: |
          echo "🔗 Validating documentation links..."
          
          # Check for broken internal links in markdown files
          find . -name "*.md" -not -path "./node_modules/*" | while read file; do
            echo "Checking links in: $file"
            
            # Extract local links and check if files exist
            grep -oE '\[.*\]\(\.\/[^)]+\)' "$file" | sed 's/.*(\.\///;s/).*//' | while read link; do
              if [ ! -f "$link" ] && [ ! -d "$link" ]; then
                echo "❌ Broken link in $file: $link"
                exit 1
              fi
            done
          done
          
          echo "✅ All documentation links are valid"

  # ============================================================================
  # Dependency Impact Analysis
  # ============================================================================
  dependency-impact:
    name: Dependency Impact
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Analyze dependency changes
        run: |
          echo "📦 Analyzing dependency changes..."
          
          # Check for package.json changes
          if git diff --name-only origin/main...HEAD | grep package.json; then
            echo "Package.json files modified:"
            git diff --name-only origin/main...HEAD | grep package.json
            
            # Show dependency changes
            git diff origin/main...HEAD -- '**/package.json' | grep -E '^\+.*".*":|^\-.*".*":' || echo "No dependency changes detected"
            
            # Install and check for new vulnerabilities
            npm ci --prefer-offline --no-audit --ignore-scripts
            npm audit --audit-level=moderate || echo "New vulnerabilities detected - please review"
            
          else
            echo "✅ No dependency changes detected"
          fi

      - name: Bundle size impact
        run: |
          echo "📊 Analyzing bundle size impact..."
          
          # Install and build current version
          npm ci --prefer-offline --no-audit --ignore-scripts
          npm run build:prod
          npm run bundle:size > current-bundle-size.txt || echo "Bundle size analysis failed"
          
          # Checkout main and compare
          git stash
          git checkout origin/main
          npm ci --prefer-offline --no-audit --ignore-scripts
          npm run build:prod  
          npm run bundle:size > baseline-bundle-size.txt || echo "Baseline bundle size analysis failed"
          
          # Compare sizes
          echo "Bundle size comparison:"
          echo "Baseline:"
          cat baseline-bundle-size.txt || echo "No baseline data"
          echo "Current:"
          cat current-bundle-size.txt || echo "No current data"

  # ============================================================================
  # Performance Impact Preview
  # ============================================================================
  performance-preview:
    name: Performance Preview
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --ignore-scripts

      - name: Build packages
        run: npm run build

      - name: Run performance tests
        run: |
          echo "⚡ Running performance preview tests..."
          node scripts/performance-test.js --iterations=50 --test=all
          echo "✅ Performance tests completed"

      - name: Comment performance results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './performance-results.json';
            
            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              
              let comment = '## 🚀 Performance Test Results\n\n';
              comment += '| Test | Average Time | Throughput | Memory Usage |\n';
              comment += '|------|-------------|------------|---------------|\n';
              
              Object.values(results.tests).forEach(test => {
                comment += `| ${test.name} | ${test.timing.average}ms | ${test.timing.throughput} ops/sec | ${test.memory.heapUsed}KB |\n`;
              });
              
              comment += '\n*These are preview results from the PR. Full performance regression analysis will run on merge.*';
              
              // Post comment
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }