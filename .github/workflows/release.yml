# Release Automation Pipeline
# Handles automated publishing to npm registry with proper versioning and documentation
name: üöÄ Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.2.3
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor  
          - major
      skip_checks:
        description: 'Skip pre-release checks'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (no actual publishing)'
        required: false
        default: false
        type: boolean

env:
  NODE_OPTIONS: '--max-old-space-size=4096'
  HUSKY: 0
  CI: true

jobs:
  # Pre-release validation and preparation
  pre-release:
    name: üîç Pre-release Validation
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.check.outputs.prerelease }}
      
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for changelog
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: üì¶ Install Dependencies
        run: |
          npx rimraf node_modules package-lock.json
          npm install --prefer-offline --no-audit --ignore-scripts

      - name: üè∑Ô∏è Extract Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Release triggered by tag: v$VERSION"
          else
            # Manual dispatch - will be set by release script
            echo "version=manual" >> $GITHUB_OUTPUT
          fi

      - name: üîç Pre-release Checks
        if: ${{ !inputs.skip_checks }}
        run: |
          echo "Running pre-release validation..."
          
          # Check git status (excluding package-lock.json which gets regenerated)
          CHANGED_FILES=$(git status --porcelain | grep -v "package-lock.json" || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "‚ùå Working directory not clean"
            echo "$CHANGED_FILES"
            exit 1
          fi
          
          # Run linting
          npm run lint
          
          # Run tests
          npm run test
          
          # Run build
          npm run build:prod
          
          # Verify build output
          npm run build:verify
          
          echo "‚úÖ All pre-release checks passed"

      - name: üîç Check Release Type
        id: check
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

  # Version and changelog management
  prepare-release:
    name: üìù Prepare Release
    runs-on: ubuntu-latest
    needs: pre-release
    if: ${{ github.event_name == 'workflow_dispatch' }}
    outputs:
      new_version: ${{ steps.release.outputs.version }}
      
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install Dependencies  
        run: |
          npx rimraf node_modules package-lock.json
          npm install --prefer-offline --no-audit --ignore-scripts

      - name: üîß Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: üöÄ Perform Release
        id: release
        run: |
          RELEASE_FLAGS=""
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            RELEASE_FLAGS="$RELEASE_FLAGS --dry-run"
          fi
          if [[ "${{ inputs.skip_checks }}" == "true" ]]; then
            RELEASE_FLAGS="$RELEASE_FLAGS --skip-checks"
          fi
          
          # Run release process
          RELEASE_OUTPUT=$(node scripts/release-manager.js release ${{ inputs.release_type }} $RELEASE_FLAGS --verbose 2>&1)
          echo "$RELEASE_OUTPUT"
          
          # Extract new version from output
          NEW_VERSION=$(echo "$RELEASE_OUTPUT" | grep -o "Release [0-9]\+\.[0-9]\+\.[0-9]\+ completed" | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: üì§ Push Changes
        if: ${{ !inputs.dry_run }}
        run: |
          git push origin main
          git push origin --tags

  # NPM package publishing - Core package first
  publish-core:
    name: üì¶ Publish Core Package
    runs-on: ubuntu-latest
    needs: [pre-release, prepare-release]
    if: ${{ always() && (needs.pre-release.result == 'success') && (!inputs.dry_run) }}
        
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: üì¶ Install Dependencies
        run: |
          npx rimraf node_modules package-lock.json
          npm install --prefer-offline --no-audit --ignore-scripts

      - name: üî® Build Core Package
        run: |
          cd packages/ai-spine-tools-core
          npm run build

      - name: üîç Core Package Verification
        run: |
          cd packages/ai-spine-tools-core
          
          # Check if package builds correctly
          if [ ! -d "dist" ]; then
            echo "‚ùå Build output not found"
            exit 1
          fi
          
          # Check package.json validity
          npm pack --dry-run

      - name: üì§ Publish Core to npm
        run: |
          cd packages/ai-spine-tools-core
          
          # Check if version already exists
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "‚ö†Ô∏è Version $PACKAGE_VERSION already exists for $PACKAGE_NAME, skipping"
            exit 0
          fi
          
          # Publish package
          npm publish --access public
          echo "‚úÖ Published $PACKAGE_NAME@$PACKAGE_VERSION"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # NPM package publishing - Dependent packages
  publish-packages:
    name: üì¶ Publish Packages
    runs-on: ubuntu-latest
    needs: [pre-release, prepare-release, publish-core]
    if: ${{ always() && (needs.pre-release.result == 'success') && (needs.publish-core.result == 'success') && (!inputs.dry_run) }}
    strategy:
      matrix:
        package: ['ai-spine-tools', 'ai-spine-tools-testing', 'create-ai-spine-tool']
        
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: üì¶ Install Dependencies
        run: |
          npx rimraf node_modules package-lock.json
          npm install --prefer-offline --no-audit --ignore-scripts

      - name: ‚è≥ Wait for Core Package Propagation
        run: |
          echo "Waiting for @ai-spine/tools-core to propagate on npm..."
          sleep 30
          
          # Verify core package is available
          for i in {1..5}; do
            if npm view "@ai-spine/tools-core" version > /dev/null 2>&1; then
              echo "‚úÖ Core package is available on npm"
              break
            else
              echo "‚è≥ Waiting for core package... (attempt $i/5)"
              sleep 10
            fi
          done

      - name: üî® Build Package
        run: |
          cd packages/${{ matrix.package }}
          npm run build

      - name: üîç Package Verification
        run: |
          cd packages/${{ matrix.package }}
          
          # Check if package builds correctly
          if [ ! -d "dist" ]; then
            echo "‚ùå Build output not found"
            exit 1
          fi
          
          # Check package.json validity
          npm pack --dry-run

      - name: üì§ Publish to npm
        run: |
          cd packages/${{ matrix.package }}
          
          # Check if version already exists
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "‚ö†Ô∏è Version $PACKAGE_VERSION already exists for $PACKAGE_NAME, skipping"
            exit 0
          fi
          
          # Publish package
          npm publish --access public
          echo "‚úÖ Published $PACKAGE_NAME@$PACKAGE_VERSION"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Create GitHub release
  create-release:
    name: üìã Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release, prepare-release, publish-core, publish-packages]
    if: ${{ always() && (needs.pre-release.result == 'success') && (needs.publish-core.result == 'success') && (needs.publish-packages.result == 'success' || needs.publish-packages.result == 'skipped') }}
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: |
          npx rimraf node_modules package-lock.json
          npm install --prefer-offline --no-audit --ignore-scripts

      - name: üìù Generate Release Notes
        id: notes
        run: |
          VERSION="${{ needs.prepare-release.outputs.new_version || needs.pre-release.outputs.release_version }}"
          
          # Generate detailed release notes
          RELEASE_NOTES=$(node scripts/release-manager.js changelog ${VERSION} 2>/dev/null || echo "## Release ${VERSION}")
          
          # Escape and prepare for GitHub
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.new_version || needs.pre-release.outputs.release_version }}
          release_name: Release ${{ needs.prepare-release.outputs.new_version || needs.pre-release.outputs.release_version }}
          body: ${{ steps.notes.outputs.notes }}
          draft: false
          prerelease: ${{ needs.pre-release.outputs.is_prerelease == 'true' }}

  # Post-release verification
  verify-release:
    name: ‚úÖ Verify Release
    runs-on: ubuntu-latest
    needs: [pre-release, prepare-release, publish-core, publish-packages, create-release]
    if: ${{ always() && (needs.create-release.result == 'success') }}
    
    strategy:
      matrix:
        package: ['@ai-spine/tools-core', '@ai-spine/tools', '@ai-spine/tools-testing', 'create-ai-spine-tool']
    
    steps:
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: ‚è≥ Wait for npm propagation
        run: sleep 30

      - name: üîç Verify npm Package
        run: |
          PACKAGE_NAME="${{ matrix.package }}"
          VERSION="${{ needs.prepare-release.outputs.new_version || needs.pre-release.outputs.release_version }}"
          
          echo "Verifying $PACKAGE_NAME@$VERSION is available..."
          
          # Try to fetch package info
          if npm view "$PACKAGE_NAME@$VERSION" version; then
            echo "‚úÖ Package $PACKAGE_NAME@$VERSION is available on npm"
          else
            echo "‚ùå Package $PACKAGE_NAME@$VERSION not found on npm"
            exit 1
          fi
          
          # Try to install package
          mkdir -p /tmp/verify-install
          cd /tmp/verify-install
          npm init -y
          npm install "$PACKAGE_NAME@$VERSION"
          echo "‚úÖ Package $PACKAGE_NAME@$VERSION installs successfully"

  # Release notification and cleanup
  notify-completion:
    name: üéâ Release Complete
    runs-on: ubuntu-latest
    needs: [pre-release, prepare-release, publish-core, publish-packages, create-release, verify-release]
    if: ${{ always() }}
    
    steps:
      - name: üìä Release Summary
        run: |
          echo "üéâ Release Automation Summary"
          echo "=================================="
          
          VERSION="${{ needs.prepare-release.outputs.new_version || needs.pre-release.outputs.release_version }}"
          echo "üì¶ Version: $VERSION"
          echo "üîó Release: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          
          echo ""
          echo "üìã Job Results:"
          echo "- Pre-release: ${{ needs.pre-release.result }}"
          echo "- Prepare: ${{ needs.prepare-release.result }}"  
          echo "- Publish Core: ${{ needs.publish-core.result }}"
          echo "- Publish Packages: ${{ needs.publish-packages.result }}"
          echo "- GitHub Release: ${{ needs.create-release.result }}"
          echo "- Verification: ${{ needs.verify-release.result }}"
          
          if [[ "${{ needs.verify-release.result }}" == "success" ]]; then
            echo ""
            echo "‚úÖ Release completed successfully!"
            echo "üì¶ Packages are now available on npm:"
            echo "- npm install @ai-spine/tools@$VERSION"
            echo "- npm install @ai-spine/tools-core@$VERSION" 
            echo "- npm install @ai-spine/tools-testing@$VERSION"
            echo "- npm install create-ai-spine-tool@$VERSION"
          else
            echo ""
            echo "‚ùå Release encountered issues. Check job logs for details."
          fi